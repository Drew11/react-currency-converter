{"version":3,"sources":["api/api.js","api/helpers.js","components/Converter/Converter.js","components/Favorites/Favorites.js","components/CurrencyRates/CurrencyRates.js","App.js","index.js"],"names":["getAllInfoCurrency","base","a","url","fetch","promise","json","currency","convertValue","selected","convertingValue","value","rates","convertToOptions","obj","keysCountry","k","push","sort","b","localeCompare","map","country","index","key","defaultValue","Converter","useState","allCurrency","setAllCurrency","baseCurrency","setBaseCurrency","selectedCurrency","setSelectedCurrency","resultValue","setResultValue","quantity","setQuantity","useEffect","allInfoCurrency","fetchData","setChangedBase","useCallback","setChangedSelectedCurrency","changeBase","event","target","className","name","id","onChange","type","min","Math","floor","Favorites","props","favorites","Dropdown","Toggle","variant","Object","entries","length","Menu","item","Item","CurrencyRates","setBase","setFavorites","addFavorites","hasOwnProperty","copy","ListGroup","size","array","Button","onClick","createListItems","App","Nav","defaultActiveKey","Link","href","exact","from","to","path","ReactDOM","render","basename","document","getElementById"],"mappings":"oXAOaA,EAAkB,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACxBC,EADwB,sDAC6BF,GAD7B,SAGRG,MAAMD,GAHE,cAGxBE,EAHwB,gBAIPA,EAAQC,OAJD,cAIxBC,EAJwB,yBAKvBA,GALuB,2CAAH,sDAsBlBC,EAAY,uCAAG,WAAOC,EAAUR,GAAjB,iBAAAC,EAAA,sEACMF,EAAmBS,GADzB,cAClBC,EADkB,OAElBC,EAAQD,EAAgBE,MAAMX,GAFZ,kBAIjBU,GAJiB,2CAAH,wDC3BZE,EAAmB,SAACC,GAC7B,IAAMC,EAAc,GAEpB,IAAK,IAAIC,KAAMF,EACXC,EAAYE,KAAKD,GAKrB,OAFAD,EAAYG,MAAK,SAAChB,EAAGiB,GAAJ,OAAUjB,EAAEkB,cAAcD,MAEpCJ,EAAYM,KAAI,SAACC,EAASC,GAAV,OACnB,4BAAQC,IAAKD,EACLE,aAAcH,GAEjBA,OC+FEI,G,MAzGG,WAAO,IAAD,EAEkBC,mBAAS,IAF3B,mBAEbC,EAFa,KAEAC,EAFA,OAGoBF,mBAAS,OAH7B,mBAGbG,EAHa,KAGCC,EAHD,OAI4BJ,mBAAS,OAJrC,mBAIbK,EAJa,KAIKC,EAJL,OAKkBN,mBAAS,GAL3B,mBAKbO,EALa,KAKAC,EALA,OAMYR,mBAAS,GANrB,mBAMbS,EANa,KAMHC,EANG,KAQpBC,qBAAU,WAAM,4CACZ,8BAAApC,EAAA,sEAEkCF,EAAmB8B,GAFrD,cAEUS,EAFV,gBAGkC/B,EAAawB,EAAkBO,EAAgBtC,MAHjF,OAGUS,EAHV,OAIImB,EAAeU,GACfJ,EAAezB,GALnB,4CADY,uBAAC,WAAD,wBAQZ8B,KACD,IAEH,IAAMC,EAAiBC,sBAAW,sBAAC,8BAAAxC,EAAA,sEACDF,EAAmB8B,GADlB,cACzBS,EADyB,OAE/BV,EAAeU,GAFgB,SAGD/B,EAAawB,EAAkBO,EAAgBtC,MAH9C,OAGzBS,EAHyB,OAI/ByB,EAAezB,GAJgB,2CAKhC,CAACoB,IAEEa,EAA6BD,sBAAW,sBAAC,4BAAAxC,EAAA,sEACbM,EAAawB,EAAkBJ,EAAY3B,MAD9B,OACrCS,EADqC,OAE3CyB,EAAezB,GAF4B,2CAG5C,CAACsB,IAEJM,qBAAU,WACPG,MACA,CAACX,IAEJQ,qBAAU,WACNK,MACD,CAACX,IAEJ,IAAMY,EAAU,uCAAG,WAAOC,GAAP,SAAA3C,EAAA,sDACf6B,EAAgBc,EAAMC,OAAOnC,OADd,2CAAH,sDAQhB,OACI,yBACIoC,UAAW,aAEX,yBAAKA,UAAW,aAEV,sCAGF,4BACIC,KAAK,oBACLC,GAAG,OACHtC,MAAOqB,EACPkB,SAjBe,SAACL,GAC5BZ,EAAoBY,EAAMC,OAAOnC,SAmBjBE,EAAiBe,EAAYhB,QAIrC,oCAGA,4BACIoC,KAAK,gBACLC,GAAG,KACHtC,MAAOmB,EACPoB,SAAUN,GAGN/B,EAAiBe,EAAYhB,QAIrC,yBAAKmC,UAAU,UACX,2BACII,KAAK,SACL1B,aAAcW,EACdgB,IAAK,EACLF,SAAU,SAACL,GAAD,OAAWR,EAAYQ,EAAMC,OAAOnC,WAItD,yBAAKoC,UAAU,UACX,6CAEA,wCACSM,KAAKC,MAAOlB,EAAWF,EAAe,KAAU,IADzD,aACoEN,EAAY3B,Y,wBCvErFsD,G,MAxBG,SAACC,GAAW,IAEnBC,EAAcD,EAAdC,UAEP,OACI,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAASC,OAAV,CAAiBC,QAAQ,UAAUX,GAAG,kBAAtC,cACgBY,OAAOC,QAAQL,GAAWM,QAG1C,kBAACL,EAAA,EAASM,KAAV,KAEKH,OAAOC,QAAQL,GAAWpC,KAAI,SAAA4C,GAAI,OAC/B,kBAACP,EAAA,EAASQ,KAAV,eAEQD,EAAK,GAFb,aAEoBA,EAAK,Y,oPCZ7C,IAmGeE,EAnGO,WAAO,IAAD,EAEcxC,mBAAS,IAFvB,mBAEjBC,EAFiB,KAEJC,EAFI,OAGAF,mBAAS,OAHT,mBAGjB1B,EAHiB,KAGXmE,EAHW,OAIUzC,mBAAS,IAJnB,mBAIjB8B,EAJiB,KAINY,EAJM,KAMxB/B,qBAAU,WAAM,4CACZ,4BAAApC,EAAA,sEAC2BF,EAAmBC,GAD9C,OACUM,EADV,OAEIsB,EAAetB,GAFnB,4CADY,uBAAC,WAAD,wBAKZiC,KACD,IAEHF,qBAAU,WAEF,IAAK,IAAItB,KAAKyC,EACVA,EAAUzC,GAAKY,EAAYhB,MAAMI,GAErCqD,EAAaZ,KAEjB,CAAC7B,IAIL,IAAM0C,EAAe,SAAC9C,EAAKb,GACvB,IAAK8C,EAAUc,eAAe/C,GAAM,CAChC,IAAMgD,E,yVAAI,IAAOf,GACjBe,EAAKhD,GAAOb,EACZ0D,EAAaG,KAIf5B,EAAU,uCAAG,WAAOC,GAAP,eAAA3C,EAAA,sEACQF,EAAmB6C,EAAMC,OAAOnC,OADxC,OACTJ,EADS,OAEfsB,EAAetB,GACf6D,EAAQ7D,EAASN,MAHF,2CAAH,sDA+BhB,OACI,yBAAK8C,UAAU,6BACX,yBAAKA,UAAU,kBACjB,0BACIA,UAAW,QAGX,uCACA,4BAAQC,KAAK,OACLrC,MAAOV,EACPiD,SAAUN,GAEb/B,EAAiBe,EAAYhB,SAKhC,kBAAC6D,EAAA,EAAD,CACIb,QAAQ,QACRb,UAAU,cACV2B,KAAM,GA7CE,WACpB,GAAI9C,EAAYhB,MAAO,CACnB,IAAM+D,EAAQd,OAAOC,QAAQlC,EAAYhB,OACnC4D,EAAI,YAAOG,GAGjB,OAFAH,EAAKtD,MAAK,SAAChB,EAAGiB,GAAJ,OAAUjB,EAAE,GAAGkB,cAAcD,EAAE,OAElCqD,EAAKnD,KAAI,SAACd,EAAUgB,GAAX,OACZ,kBAACkD,EAAA,EAAUP,KAAX,CACI1C,IAAKD,EACLwB,UAAU,oBAFd,UAIQxC,EAAS,GAJjB,aAIwBA,EAAS,IAE7B,kBAACqE,EAAA,EAAD,CACIC,QAAS,WACLP,EAAa/D,EAAS,GAAIA,EAAS,MAF3C,UAkCCuE,KAKT,kBAAC,EAAD,CACIrB,UAAWA,M,wBCxDZsB,G,MAnCH,WACR,OACI,yBAAKhC,UAAU,OACX,4BAAQA,UAAU,cAEd,kBAACiC,EAAA,EAAD,CAAKpB,QAAQ,OAAOqB,iBAAiB,SACjC,kBAACD,EAAA,EAAId,KAAL,KACI,kBAACc,EAAA,EAAIE,KAAL,CAAUC,KAAK,eAAf,cAEJ,kBAACH,EAAA,EAAId,KAAL,KACI,kBAACc,EAAA,EAAIE,KAAL,CAAUC,KAAK,oBAAf,qBAQZ,8BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUC,OAAK,EAACC,KAAK,iBAAiBC,GAAG,eACzC,kBAAC,IAAD,CAAOC,KAAK,cACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,mBACR,kBAAC,EAAD,SAIZ,oCC/BZC,IAASC,OACL,kBAAC,IAAD,CAAQC,SAAU,8BACd,kBAAC,EAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.3b4a2110.chunk.js","sourcesContent":["const getGeoData = async ()=>{\r\n   // const promise = await fetch('http://api.ipstack.com/check?access_key=ce43b9472f5f4a2379636b82cd17bc83');\r\n    const promise = await fetch('https://ipinfo.io?token=5455558e65b8b4');\r\n    const geoData = await promise.json();\r\n    return geoData;\r\n};\r\n\r\nexport const getAllInfoCurrency = async (base)=>{\r\n    const url = `https://api.exchangeratesapi.io/latest?base=${base}`;\r\n   // const promise = await fetch(`http://data.fixer.io/api/latest?access_key=032f3ff907cc406f6edc0a4a469ebfe3&base=USD&symbols=UAH`);\r\n    const promise = await fetch(url);\r\n    const currency = await promise.json();\r\n    return currency;\r\n};\r\n\r\nexport const getCountryCurrency = async (country)=>{\r\n    const promise = await fetch(`https://restcountries.eu/rest/v2/alpha/${country}`);\r\n    const countryCurrency = await promise.json();\r\n    return countryCurrency;\r\n};\r\n\r\nexport const getBaseUserGeoCurrency = async ()=> {\r\n    const location = await getGeoData();\r\n    const countryCurrency = await getCountryCurrency(location.country);\r\n\r\n    const baseCurrency = countryCurrency.currencies[0].code;\r\n    return baseCurrency\r\n};\r\n\r\nexport const convertValue = async (selected, base) => {\r\n    const convertingValue = await getAllInfoCurrency(selected);\r\n    const value = convertingValue.rates[base];\r\n\r\n    return value\r\n};","import React from 'react';\r\n\r\nexport const convertToOptions = (obj) => {\r\n    const keysCountry = [];\r\n\r\n    for (let k in  obj) {\r\n        keysCountry.push(k)\r\n    }\r\n\r\n    keysCountry.sort((a, b) => a.localeCompare(b));\r\n\r\n    return keysCountry.map((country, index) =>\r\n        <option key={index}\r\n                defaultValue={country}\r\n        >\r\n            {country}\r\n        </option>\r\n    )\r\n};","import React, {useEffect, useState, useCallback} from 'react';\r\nimport {convertValue, getAllInfoCurrency} from \"../../api/api\";\r\nimport {convertToOptions} from '../../api/helpers';\r\nimport './converter.css';\r\n\r\nconst Converter = () => {\r\n\r\n    const [allCurrency, setAllCurrency] = useState({});\r\n    const [baseCurrency, setBaseCurrency] = useState('USD');\r\n    const [selectedCurrency, setSelectedCurrency] = useState('RUB');\r\n    const [resultValue, setResultValue] = useState(0);\r\n    const [quantity, setQuantity] = useState(1);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            //const userGeoCurrency = await getBaseUserGeoCurrency();\r\n            const allInfoCurrency = await getAllInfoCurrency(baseCurrency);\r\n            const convertingValue = await convertValue(selectedCurrency, allInfoCurrency.base);\r\n            setAllCurrency(allInfoCurrency);\r\n            setResultValue(convertingValue);\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    const setChangedBase = useCallback(async()=>{\r\n        const allInfoCurrency = await getAllInfoCurrency(baseCurrency);\r\n        setAllCurrency(allInfoCurrency);\r\n        const convertingValue = await convertValue(selectedCurrency, allInfoCurrency.base);\r\n        setResultValue(convertingValue);\r\n    }, [baseCurrency]);\r\n\r\n    const setChangedSelectedCurrency = useCallback(async()=>{\r\n        const convertingValue = await convertValue(selectedCurrency, allCurrency.base);\r\n        setResultValue(convertingValue);\r\n    }, [selectedCurrency]);\r\n\r\n    useEffect(() => {\r\n       setChangedBase();\r\n    }, [baseCurrency]);\r\n\r\n    useEffect(() => {\r\n        setChangedSelectedCurrency();\r\n    }, [selectedCurrency]);\r\n\r\n    const changeBase = async (event) => {\r\n        setBaseCurrency(event.target.value)\r\n    };\r\n\r\n    const changeSelectedCurrency = (event) => {\r\n        setSelectedCurrency(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={\"container\"}\r\n        >\r\n            <div className={\"converter\"}>\r\n\r\n                  <span>\r\n                      from\r\n                  </span>\r\n                <select\r\n                    name=\"currency-selected\"\r\n                    id=\"from\"\r\n                    value={selectedCurrency}\r\n                    onChange={changeSelectedCurrency}\r\n                >\r\n                    {\r\n                        convertToOptions(allCurrency.rates)\r\n                    }\r\n                </select>\r\n\r\n                <span>\r\n                      to\r\n                  </span>\r\n                <select\r\n                    name=\"currency-base\"\r\n                    id=\"to\"\r\n                    value={baseCurrency}\r\n                    onChange={changeBase}\r\n                >\r\n                    {\r\n                        convertToOptions(allCurrency.rates)\r\n                    }\r\n                </select>\r\n\r\n                <div className=\"amount\">\r\n                    <input\r\n                        type=\"number\"\r\n                        defaultValue={quantity}\r\n                        min={1}\r\n                        onChange={(event) => setQuantity(event.target.value)}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"result\">\r\n                    <h2>Result value:</h2>\r\n\r\n                    <span>\r\n                         {`${Math.floor((quantity * resultValue) * 100000) / 100000}: ${allCurrency.base}`}\r\n                    </span>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default Converter;","import React from 'react';\r\nimport {Dropdown} from 'react-bootstrap';\r\nimport './favorites.css';\r\n\r\nconst Favorites = (props) => {\r\n\r\n    const {favorites } = props;\r\n\r\n    return (\r\n        <Dropdown>\r\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                Favorites: {Object.entries(favorites).length}\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n\r\n                {Object.entries(favorites).map(item =>\r\n                    <Dropdown.Item\r\n                    >\r\n                        {`${item[0]}: ${item[1]}` }\r\n                    </Dropdown.Item>\r\n                )}\r\n\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    )\r\n};\r\n\r\nexport default Favorites;","import React, {useEffect, useState} from 'react';\r\nimport Favorites from '../Favorites/Favorites';\r\nimport {Button, ListGroup} from 'react-bootstrap';\r\nimport {getAllInfoCurrency} from '../../api/api';\r\nimport {convertToOptions} from '../../api/helpers';\r\nimport './current-rates.css';\r\n\r\nconst CurrencyRates = () => {\r\n\r\n    const [allCurrency, setAllCurrency] = useState({});\r\n    const [base, setBase] = useState('USD');\r\n    const [favorites, setFavorites] = useState({});\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const currency = await getAllInfoCurrency(base);\r\n            setAllCurrency(currency);\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n            for (let k in favorites) {\r\n                favorites[k] = allCurrency.rates[k]\r\n            }\r\n            setFavorites(favorites);\r\n        },\r\n        [allCurrency]\r\n    );\r\n\r\n\r\n    const addFavorites = (key, value) => {\r\n        if (!favorites.hasOwnProperty(key)) {\r\n            const copy = {...favorites};\r\n            copy[key] = value;\r\n            setFavorites(copy)\r\n        }\r\n    };\r\n\r\n    const changeBase = async (event) => {\r\n        const currency = await getAllInfoCurrency(event.target.value);\r\n        setAllCurrency(currency);\r\n        setBase(currency.base);\r\n    };\r\n\r\n    const createListItems = () => {\r\n        if (allCurrency.rates) {\r\n            const array = Object.entries(allCurrency.rates);\r\n            const copy = [...array];\r\n            copy.sort((a, b) => a[0].localeCompare(b[0]));\r\n\r\n            return copy.map((currency, index) =>\r\n                <ListGroup.Item\r\n                    key={index}\r\n                    className=\"list__group-item\"\r\n                >\r\n                    {`${currency[0]}: ${currency[1]}`}\r\n\r\n                    <Button\r\n                        onClick={() => {\r\n                            addFavorites(currency[0], currency[1])\r\n                        }}\r\n                    >+\r\n                    </Button>\r\n\r\n                </ListGroup.Item>\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"container__currency-rates\">\r\n            <div className=\"currency-rates\">\r\n          <span\r\n              className={\"base\"}\r\n\r\n          >\r\n              <span>Base:</span>\r\n              <select name=\"base\"\r\n                      value={base}\r\n                      onChange={changeBase}\r\n              >\r\n                  {convertToOptions(allCurrency.rates)}\r\n\r\n              </select>\r\n          </span>\r\n\r\n                <ListGroup\r\n                    variant=\"flush\"\r\n                    className=\"list__group\"\r\n                    size={4}\r\n                >\r\n                    {createListItems()}\r\n                </ListGroup>\r\n\r\n            </div>\r\n\r\n            <Favorites\r\n                favorites={favorites}\r\n            />\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CurrencyRates;","import React from 'react';\nimport Converter from './components/Converter/Converter';\nimport CurrencyRates from './components/CurrencyRates/CurrencyRates';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Nav} from 'react-bootstrap';\nimport {Route, Switch, Redirect } from \"react-router\";\nimport './App.css';\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n\n                <Nav variant=\"tabs\" defaultActiveKey=\"/home\">\n                    <Nav.Item>\n                        <Nav.Link href=\"./converter\">Converter</Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                        <Nav.Link href=\"./currency_rates\">\n                            Currency Rates\n                        </Nav.Link>\n                    </Nav.Item>\n                </Nav>\n\n            </header>\n\n            <main>\n                <Switch>\n                    <Redirect exact from=\"/forecast-app/\" to=\"/converter\" />\n                    <Route path=\"/converter\">\n                        <Converter/>\n                    </Route>\n                    <Route path=\"/currency_rates\">\n                        <CurrencyRates/>\n                    </Route>\n                </Switch>\n            </main>\n            <footer>\n            </footer>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <Router basename={'/react-currency-converter/'}>\n        <App />\n    </Router>,\n    document.getElementById('root'));\n\n"],"sourceRoot":""}