{"version":3,"sources":["api/api.js","App.js","serviceWorker.js","index.js"],"names":["getGeoData","a","fetch","promise","json","getAllCurrency","currency","getCountryCurrnecy","country","countryCurrency","App","convertToOptions","keysCountry","k","state","allCurrency","rates","push","sort","b","localeCompare","map","index","key","defaultValue","setSelectedCurrency","event","setState","selectedCurrency","target","value","setCurrencyBase","baseCurrency","convertValue","url","convertingValue","Math","floor","getFromFavorites","itemFromFavorites","newBaseCurrency","createListItems","array","Object","entries","copy","ListGroup","Item","className","Button","onClick","favorites","includes","defaultResult","quantity","location","country_code","this","currencies","code","console","log","Container","Row","Col","sm","name","id","onChange","type","min","base","variant","Dropdown","Toggle","length","Menu","item","React","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e11b6f72.chunk.js","sourcesContent":["\r\n\r\nexport const getGeoData = async ()=>{\r\n    const promise = await fetch('http://api.ipstack.com/check?access_key=ce43b9472f5f4a2379636b82cd17bc83');\r\n    const getGeoData = await promise.json();\r\n\r\n    return getGeoData;\r\n};\r\n\r\nexport const getAllCurrency = async ()=>{\r\n    const url = 'https://api.exchangeratesapi.io/latest?base=USD';\r\n   // const promise = await fetch(`http://data.fixer.io/api/latest?access_key=032f3ff907cc406f6edc0a4a469ebfe3&base=USD&symbols=UAH`);\r\n    const promise = await fetch(url);\r\n    const currency = await promise.json();\r\n\r\n    return currency;\r\n\r\n};\r\n\r\nexport const getCountryCurrnecy = async (country)=>{\r\n    const promise = await fetch(`https://restcountries.eu/rest/v2/alpha/${country}`);\r\n    const countryCurrency = await promise.json();\r\n    return countryCurrency;\r\n};\r\n\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n    Container,\n    Row,\n    Col,\n    Button,\n    ListGroup,\n    Dropdown\n} from 'react-bootstrap';\n\nimport './App.css';\nimport {\n    getGeoData,\n    getAllCurrency,\n    getCountryCurrnecy,\n} from './api/api';\n\n\nclass App extends React.Component{\n\n  constructor(){\n      super();\n\n      this.state = {\n          allCurrency: {},\n          selectedCurrency:'USD',\n          baseCurrency:'',\n          convertingValue: null,\n          defaultResult: '0.0000',\n          favorites:[],\n          quantity:1\n      };\n  }\n\n\n   convertToOptions = ()=>{\n      const keysCountry  = [];\n\n      for(let k in  this.state.allCurrency.rates) {\n          keysCountry.push(k)\n      }\n\n      keysCountry.sort((a, b)=>a.localeCompare(b));\n\n      return keysCountry.map((country , index )=>\n          <option key={index}\n                  defaultValue={country}\n          >\n              {country}\n          </option>\n      )\n    };\n\n    setSelectedCurrency = (event)=>{\n        this.setState({...this.state,\n            selectedCurrency: event.target.value});\n    };\n\n    setCurrencyBase = (event)=>{\n        this.setState({...this.state,\n            baseCurrency: event.target.value});\n    };\n\n\n    convertValue = async ()=>{\n        const url =  `https://api.exchangeratesapi.io/latest?base=${this.state.baseCurrency}`;\n        const promise = await fetch(url);\n        const convertingValue= await promise.json();\n        const value = convertingValue.rates[this.state.selectedCurrency];\n\n        this.setState({...this.state, convertingValue: Math.floor(value*10000) / 10000})\n    };\n\n    getFromFavorites = async (itemFromFavorites)=>{\n\n        const url =  `https://api.exchangeratesapi.io/latest?base=${itemFromFavorites}`;\n        const promise = await fetch(url);\n        const newBaseCurrency = await promise.json();\n\n        this.setState({...this.state, allCurrency: newBaseCurrency})\n    };\n\n    createListItems = ()=> {\n         if(this.state.allCurrency.rates){\n             const array = Object.entries(this.state.allCurrency.rates);\n             const copy = [...array];\n             copy.sort((a,b)=>a[0].localeCompare(b[0]));\n\n\n            return copy.map((currency, index)=>\n                <ListGroup.Item\n                    key={index}\n                    className=\"list-group-item\"\n                >\n                    {`${currency[0]}: ${currency[1]}`}\n\n                    <Button\n                     onClick={()=>{\n                         if(!this.state.favorites.includes(currency[0])){\n                             const copy = [...this.state.favorites];\n                             copy.push(currency[0]);\n\n                             this.setState({...this.state, favorites: copy})}}\n                         }\n                    >+\n                    </Button>\n\n                </ListGroup.Item>\n             );\n         }\n    };\n\n\n    async componentDidMount(){\n     const location = await getGeoData();\n     const allCurrency = await getAllCurrency();\n     const countryCurrency = await getCountryCurrnecy(location.country_code);\n\n     this.setState({...this.state,\n                 allCurrency: allCurrency,\n                 baseCurrency: countryCurrency.currencies[0].code\n     })\n\n  }\n  render(){\n      console.log(this.state);\n\n      return (\n          <div className=\"App\">\n              <header className=\"App-header\">\n\n              </header>\n\n\n              <main>\n                  <Container\n                      className={\"container\"}\n                  >\n\n                  <Row className={\"row\"}>\n                      <Col\n                          className={\"col-sm-4\"}\n                          sm={4}>\n                          <div className={\"converter\"}>\n\n                  <span>\n                      from\n                  </span>\n\n                              <select\n                                  name=\"currencyBase\"\n                                  id=\"from\"\n                                  value={this.state.baseCurrency}\n                                  onChange={this.setCurrencyBase}\n                              >\n                                  {\n                                      this.convertToOptions()\n                                  }\n                              </select>\n\n                              <span>\n                      to\n                  </span>\n\n                              <select\n                                  name=\"currencySelected\"\n                                  id=\"to\"\n                                  value={this.state.selectedCurrency}\n                                  onChange={this.setSelectedCurrency}\n                              >\n                                  {\n                                      this.convertToOptions()\n                                  }\n                              </select>\n\n                              <div className=\"amount\">\n                                  <input\n                                      type=\"number\"\n                                      defaultValue={this.state.quantity}\n                                      min={this.state.quantity}\n                                      onChange={(event)=>this.setState({...this.state, quantity: event.target.value})}\n                                  />\n                              </div>\n\n                              <Button\n                                  onClick={()=>this.convertValue() }\n                              >\n                                  Convert\n                              </Button>\n\n\n                              <div className=\"result\">\n                     <span>\n                      {this.state.convertingValue?this.state.quantity*this.state.convertingValue:\n                          this.state.defaultResult\n                      }\n                    </span>\n\n                  </div>\n\n                  </div>\n\n\n                  </Col>\n                      <Col sm={8}\n                           className=\"current-currency\"\n\n                      >\n                          <div className=\"current-currency-rates\">\n                              <span>\n                              Base: {this.state.allCurrency.base}\n                          </span>\n\n                              <ListGroup variant=\"flush\">\n                                  {this.createListItems()}\n                              </ListGroup>\n                          </div>\n\n\n\n                          <Dropdown>\n                              <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                                  Favoites: {this.state.favorites.length}\n                              </Dropdown.Toggle>\n\n                              <Dropdown.Menu>\n\n                                  {this.state.favorites.map(item=>\n                                      <Dropdown.Item\n                                          onClick={()=>this.getFromFavorites(item)}\n                                      >\n                                          {item}\n                                      </Dropdown.Item>\n                                  )}\n\n                              </Dropdown.Menu>\n                          </Dropdown>\n\n                      </Col>\n                  </Row>\n             </Container>\n\n              </main>\n              <footer>\n\n              </footer>\n          </div>\n      );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}