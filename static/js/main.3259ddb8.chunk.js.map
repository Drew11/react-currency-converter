{"version":3,"sources":["api/api.js","api/helpers.js","components/Converter/Converter.js","components/Favorites/Favorites.js","components/CurrencyRates/CurrencyRates.js","App.js","index.js"],"names":["getGeoData","a","fetch","promise","json","geoData","getBaseUserGeoCurrency","location","getCountryCurrency","country","countryCurrency","baseCurrency","currencies","code","getAllInfoCurrency","base","URL","mode","currency","conversion_rates","convertValue","selected","convertingValue","value","convertToOptions","obj","keysCountry","k","console","log","push","sort","b","localeCompare","map","index","key","defaultValue","Converter","useState","allCurrency","setAllCurrency","resultValue","setResultValue","selectedCurrency","setSelectedCurrency","setBaseCurrency","quantity","setQuantity","useEffect","userGeoCurrency","allInfoCurrency","fetchData","updateValue","result","Math","floor","className","name","id","onChange","event","target","type","min","Favorites","props","favorites","Dropdown","Toggle","variant","Object","entries","length","Menu","item","Item","CurrencyRates","setFavorites","setBase","addFavorites","hasOwnProperty","copy","changeBase","ListGroup","size","array","Button","onClick","createListItems","App","Nav","to","Link","exact","from","path","component","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.3259ddb8.chunk.js","sourcesContent":["const getGeoData = async ()=>{\r\n   // const promise = await fetch('http://api.ipstack.com/check?access_key=ce43b9472f5f4a2379636b82cd17bc83');\r\n    const promise = await fetch('https://ipinfo.io?token=5455558e65b8b4');\r\n    const geoData = await promise.json();\r\n    return geoData;\r\n};\r\n\r\nexport const getBaseUserGeoCurrency = async ()=> {\r\n    const location = await getGeoData();\r\n    const countryCurrency = await getCountryCurrency(location.country);\r\n    const baseCurrency = countryCurrency.currencies[0].code;\r\n    return baseCurrency\r\n};\r\n\r\nexport const getAllInfoCurrency = async (base)=>{\r\n    const APIkey = 'a515eed149f7937c6e2ce9c8';\r\n    const URL = `https://v6.exchangerate-api.com/v6/${APIkey}/latest/${base}`;\r\n    const promise = await fetch(URL, {\r\n        mode: \"cors\",\r\n    });\r\n    const currency = await promise.json();\r\n    return currency.conversion_rates;\r\n};\r\n\r\nexport const getCountryCurrency = async (country)=>{\r\n    const promise = await fetch(`https://restcountries.eu/rest/v2/alpha/${country}`);\r\n    const countryCurrency = await promise.json();\r\n    return countryCurrency;\r\n};\r\n\r\n\r\nexport const convertValue = async (selected, base) => {\r\n    const convertingValue = await getAllInfoCurrency(selected);\r\n    const value = convertingValue[base];\r\n    return value\r\n};","import React from 'react';\r\n\r\nexport const convertToOptions = (obj) => {\r\n    const keysCountry = [];\r\n    console.log(obj)\r\n    for (let k in  obj) {\r\n        keysCountry.push(k)\r\n    }\r\n\r\n    keysCountry.sort((a, b) => a.localeCompare(b));\r\n\r\n    return keysCountry.map((country, index) =>\r\n        <option key={index}\r\n                defaultValue={country}\r\n        >\r\n            {country}\r\n        </option>\r\n    )\r\n};","import React, {useEffect, useState } from 'react';\r\nimport {convertValue, getAllInfoCurrency,  getBaseUserGeoCurrency} from \"../../api/api\";\r\nimport {convertToOptions} from '../../api/helpers';\r\nimport './converter.css';\r\n\r\nconst Converter = () => {\r\n\r\n    const [allCurrency, setAllCurrency] = useState(null);\r\n    const [resultValue, setResultValue] = useState(null);\r\n    const [selectedCurrency, setSelectedCurrency] = useState( '');\r\n    const [baseCurrency, setBaseCurrency] = useState('USD');\r\n    const [quantity, setQuantity] = useState(1);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const userGeoCurrency = await getBaseUserGeoCurrency();\r\n            const allInfoCurrency = await getAllInfoCurrency(baseCurrency);\r\n            setAllCurrency(allInfoCurrency);\r\n            setSelectedCurrency(userGeoCurrency);\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    const updateValue = async ()=>{\r\n         const convertingValue = await convertValue(selectedCurrency, baseCurrency);\r\n         setResultValue(convertingValue);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(selectedCurrency){\r\n            updateValue();\r\n        }\r\n    }, [selectedCurrency, baseCurrency]);\r\n\r\n    const changeBase = (event) => {\r\n        setBaseCurrency(event.target.value)\r\n    };\r\n\r\n    const changeSelectedCurrency = (event) => {\r\n        setSelectedCurrency(event.target.value);\r\n    };\r\n\r\n    const changeQuantity = (event) => {\r\n        setQuantity(+event.target.value)\r\n    }\r\n\r\n    const result = `${Math.floor((quantity * resultValue) * 100000) / 100000}: ${baseCurrency}`;\r\n\r\n    return (\r\n        <div\r\n            className={\"container\"}\r\n        >\r\n            <div className={\"converter\"}>\r\n\r\n                  <span>\r\n                      from\r\n                  </span>\r\n                <select\r\n                    name=\"currency-selected\"\r\n                    id=\"from\"\r\n                    value={selectedCurrency}\r\n                    onChange={changeSelectedCurrency}\r\n                >\r\n                    {\r\n                        allCurrency && convertToOptions(allCurrency)\r\n                    }\r\n                </select>\r\n\r\n                <span>\r\n                      to\r\n                  </span>\r\n                <select\r\n                    name=\"currency-base\"\r\n                    id=\"to\"\r\n                    value={baseCurrency}\r\n                    onChange={changeBase}\r\n                >\r\n                    {\r\n                       allCurrency && convertToOptions(allCurrency)\r\n                    }\r\n                </select>\r\n\r\n                <div className=\"amount\">\r\n                    <input\r\n                        type=\"number\"\r\n                        defaultValue={quantity}\r\n                        min={1}\r\n                        onChange={changeQuantity}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"result\">\r\n                    <h2>Result value:</h2>\r\n\r\n                    <span>\r\n                         {result}\r\n                    </span>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Converter;","import React from 'react';\r\nimport {Dropdown} from 'react-bootstrap';\r\nimport './favorites.css';\r\n\r\nconst Favorites = (props) => {\r\n\r\n    const { favorites } = props;\r\n\r\n    return (\r\n        <Dropdown>\r\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                Favorites: {Object.entries(favorites).length}\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n\r\n                {Object.entries(favorites).map(item =>\r\n                    <Dropdown.Item\r\n                    >\r\n                        {`${item[0]}: ${item[1]}` }\r\n                    </Dropdown.Item>\r\n                )}\r\n\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    )\r\n};\r\n\r\nexport default Favorites;","import React, {useEffect, useState} from 'react';\r\nimport Favorites from '../Favorites/Favorites';\r\nimport {Button, ListGroup} from 'react-bootstrap';\r\nimport {getAllInfoCurrency} from '../../api/api';\r\nimport {convertToOptions} from '../../api/helpers';\r\nimport './current-rates.css';\r\n\r\nconst CurrencyRates = () => {\r\n\r\n    const [allCurrency, setAllCurrency] = useState( {});\r\n    const [favorites, setFavorites] = useState( {});\r\n    const [base, setBase] = useState('USD');\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const currency = await getAllInfoCurrency(base);\r\n            setAllCurrency(currency);\r\n        }\r\n        fetchData();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n            for (let k in favorites) {\r\n                favorites[k] = allCurrency[k]\r\n            }\r\n            setFavorites(favorites);\r\n        },\r\n        [allCurrency]\r\n    );\r\n\r\n\r\n    const addFavorites = (key, value) => {\r\n        if (!favorites.hasOwnProperty(key)) {\r\n            const copy = {...favorites};\r\n            copy[key] = value;\r\n            setFavorites(copy)\r\n        }\r\n    };\r\n\r\n    const changeBase = async (event) => {\r\n        const currency = await getAllInfoCurrency(event.target.value);\r\n        setAllCurrency(currency);\r\n        setBase(currency.base);\r\n    };\r\n\r\n    const createListItems = () => {\r\n        if (allCurrency) {\r\n            const array = Object.entries(allCurrency);\r\n            const copy = [...array];\r\n            copy.sort((a, b) => a[0].localeCompare(b[0]));\r\n\r\n            return copy.map((currency, index) =>\r\n                <ListGroup.Item\r\n                    key={index}\r\n                    className=\"list__group-item\"\r\n                >\r\n                    {`${currency[0]}: ${currency[1]}`}\r\n\r\n                    <Button\r\n                        onClick={() => {\r\n                            addFavorites(currency[0], currency[1])\r\n                        }}\r\n                    >+\r\n                    </Button>\r\n\r\n                </ListGroup.Item>\r\n            );\r\n        }\r\n    };\r\n\r\n    console.log(allCurrency)\r\n\r\n    return (\r\n        <div className=\"container__currency-rates\">\r\n            <div className=\"currency-rates\">\r\n          <span\r\n              className={\"base\"}\r\n\r\n          >\r\n              <span>Base:</span>\r\n              <select name=\"base\"\r\n                      value={base}\r\n                      onChange={changeBase}\r\n              >\r\n                  {allCurrency && convertToOptions(allCurrency)}\r\n\r\n              </select>\r\n          </span>\r\n\r\n                <ListGroup\r\n                    variant=\"flush\"\r\n                    className=\"list__group\"\r\n                    size={4}\r\n                >\r\n                    {createListItems()}\r\n                </ListGroup>\r\n\r\n            </div>\r\n\r\n            <Favorites\r\n                favorites={favorites}\r\n            />\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CurrencyRates;","import React from 'react';\r\nimport Converter from './components/Converter/Converter';\r\nimport CurrencyRates from './components/CurrencyRates/CurrencyRates';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {Nav} from 'react-bootstrap';\r\nimport {Redirect, Route} from \"react-router\";\r\nimport {LinkContainer} from 'react-router-bootstrap'\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <Nav variant=\"tabs\">\r\n                    <Nav.Item>\r\n                        <LinkContainer to=\"/converter\">\r\n                            <Nav.Link>\r\n                                Converter\r\n                            </Nav.Link>\r\n                        </LinkContainer>\r\n\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <LinkContainer to=\"/currency_rates\">\r\n                            <Nav.Link>\r\n                                Currency Rates\r\n                            </Nav.Link>\r\n                        </LinkContainer>\r\n                    </Nav.Item>\r\n                </Nav>\r\n            </header>\r\n            <main>\r\n                <Redirect exact from=\"/\" to={\"/converter\"}/>\r\n                <Route exact path=\"/converter\" component={Converter}/>\r\n                <Route exact path=\"/currency_rates\" component={CurrencyRates}/>\r\n            </main>\r\n            <footer>\r\n            </footer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <Router basename=\"/react-currency-converter/\">\r\n        <App />\r\n    </Router>,\r\n    document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}