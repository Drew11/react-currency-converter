{"version":3,"sources":["api/api.js","App.js","serviceWorker.js","index.js"],"names":["getGeoData","a","fetch","promise","json","geoData","getAllCurrency","currency","getCountryCurrnecy","country","countryCurrency","App","convertToOptions","keysCountry","k","state","allCurrency","rates","push","sort","b","localeCompare","map","index","key","defaultValue","setSelectedCurrency","event","setState","selectedCurrency","target","value","setCurrencyBase","baseCurrency","convertValue","url","convertingValue","Math","floor","getFromFavorites","itemFromFavorites","newBaseCurrency","createListItems","array","Object","entries","copy","ListGroup","Item","className","Button","onClick","favorites","includes","defaultResult","quantity","location","this","currencies","code","console","log","Container","Row","Col","sm","name","id","onChange","type","min","base","variant","Dropdown","Toggle","length","Menu","item","React","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fda3ad30.chunk.js","sourcesContent":["\r\n\r\nexport const getGeoData = async ()=>{\r\n   // const promise = await fetch('http://api.ipstack.com/check?access_key=ce43b9472f5f4a2379636b82cd17bc83');\r\n    const promise = await fetch('https://ipinfo.io?token=5455558e65b8b4');\r\n    const geoData = await promise.json();\r\n\r\n    return geoData;\r\n};\r\n\r\nexport const getAllCurrency = async ()=>{\r\n    const url = 'https://api.exchangeratesapi.io/latest?base=USD';\r\n   // const promise = await fetch(`http://data.fixer.io/api/latest?access_key=032f3ff907cc406f6edc0a4a469ebfe3&base=USD&symbols=UAH`);\r\n    const promise = await fetch(url);\r\n    const currency = await promise.json();\r\n\r\n    return currency;\r\n\r\n};\r\n\r\nexport const getCountryCurrnecy = async (country)=>{\r\n    const promise = await fetch(`https://restcountries.eu/rest/v2/alpha/${country}`);\r\n    const countryCurrency = await promise.json();\r\n    return countryCurrency;\r\n};\r\n\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Button, Col, Container, Dropdown, ListGroup, Row} from 'react-bootstrap';\n\nimport './App.css';\nimport {getAllCurrency, getCountryCurrnecy, getGeoData,} from './api/api';\n\n\nclass App extends React.Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            allCurrency: {},\n            selectedCurrency: 'USD',\n            baseCurrency: '',\n            convertingValue: null,\n            defaultResult: '0.0000',\n            favorites: [],\n            quantity: 1\n        };\n    }\n\n\n    convertToOptions = () => {\n        const keysCountry = [];\n\n        for (let k in  this.state.allCurrency.rates) {\n            keysCountry.push(k)\n        }\n\n        keysCountry.sort((a, b) => a.localeCompare(b));\n\n        return keysCountry.map((country, index) =>\n            <option key={index}\n                    defaultValue={country}\n            >\n                {country}\n            </option>\n        )\n    };\n\n    setSelectedCurrency = (event) => {\n        this.setState({\n            ...this.state,\n            selectedCurrency: event.target.value\n        });\n    };\n\n    setCurrencyBase = (event) => {\n        this.setState({\n            ...this.state,\n            baseCurrency: event.target.value\n        });\n    };\n\n\n    convertValue = async () => {\n        const url = `https://api.exchangeratesapi.io/latest?base=${this.state.baseCurrency}`;\n        const promise = await fetch(url);\n        const convertingValue = await promise.json();\n        const value = convertingValue.rates[this.state.selectedCurrency];\n\n        this.setState({...this.state, convertingValue: Math.floor(value * 10000) / 10000})\n    };\n\n    getFromFavorites = async (itemFromFavorites) => {\n\n        const url = `https://api.exchangeratesapi.io/latest?base=${itemFromFavorites}`;\n        const promise = await fetch(url);\n        const newBaseCurrency = await promise.json();\n\n        this.setState({...this.state, allCurrency: newBaseCurrency})\n    };\n\n    createListItems = () => {\n        if (this.state.allCurrency.rates) {\n            const array = Object.entries(this.state.allCurrency.rates);\n            const copy = [...array];\n            copy.sort((a, b) => a[0].localeCompare(b[0]));\n\n\n            return copy.map((currency, index) =>\n                <ListGroup.Item\n                    key={index}\n                    className=\"list-group-item\"\n                >\n                    {`${currency[0]}: ${currency[1]}`}\n\n                    <Button\n                        onClick={() => {\n                            if (!this.state.favorites.includes(currency[0])) {\n                                const copy = [...this.state.favorites];\n                                copy.push(currency[0]);\n\n                                this.setState({...this.state, favorites: copy})\n                            }\n                        }\n                        }\n                    >+\n                    </Button>\n\n                </ListGroup.Item>\n            );\n        }\n    };\n\n\n    async componentDidMount() {\n        const location = await getGeoData();\n        const allCurrency = await getAllCurrency();\n        const countryCurrency = await getCountryCurrnecy(location.country);\n\n        this.setState({\n            ...this.state,\n            allCurrency: allCurrency,\n            baseCurrency: countryCurrency.currencies[0].code\n        })\n\n    }\n\n    render() {\n        console.log(this.state);\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n\n                </header>\n\n\n                <main>\n                    <Container\n                        className={\"container\"}\n                    >\n\n                        <Row className={\"row\"}>\n                            <Col\n                                className={\"col-sm-4\"}\n                                sm={4}>\n                                <div className={\"converter\"}>\n\n                  <span>\n                      from\n                  </span>\n\n                                    <select\n                                        name=\"currencyBase\"\n                                        id=\"from\"\n                                        value={this.state.baseCurrency}\n                                        onChange={this.setCurrencyBase}\n                                    >\n                                        {\n                                            this.convertToOptions()\n                                        }\n                                    </select>\n\n                                    <span>\n                      to\n                  </span>\n\n                                    <select\n                                        name=\"currencySelected\"\n                                        id=\"to\"\n                                        value={this.state.selectedCurrency}\n                                        onChange={this.setSelectedCurrency}\n                                    >\n                                        {\n                                            this.convertToOptions()\n                                        }\n                                    </select>\n\n                                    <div className=\"amount\">\n                                        <input\n                                            type=\"number\"\n                                            defaultValue={this.state.quantity}\n                                            min={this.state.quantity}\n                                            onChange={(event) => this.setState({\n                                                ...this.state,\n                                                quantity: event.target.value\n                                            })}\n                                        />\n                                    </div>\n\n                                    <Button\n                                        onClick={() => this.convertValue()}\n                                    >\n                                        Convert\n                                    </Button>\n\n\n                                    <div className=\"result\">\n                     <span>\n                      {this.state.convertingValue ? this.state.quantity * this.state.convertingValue :\n                          this.state.defaultResult\n                      }\n                    </span>\n\n                                    </div>\n\n                                </div>\n\n\n                            </Col>\n                            <Col sm={8}\n                                 className=\"current-currency\"\n\n                            >\n                                <div className=\"current-currency-rates\">\n                              <span>\n                              Base: {this.state.allCurrency.base}\n                          </span>\n\n                                    <ListGroup variant=\"flush\">\n                                        {this.createListItems()}\n                                    </ListGroup>\n                                </div>\n\n                                <Dropdown>\n                                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\n                                        Favoites: {this.state.favorites.length}\n                                    </Dropdown.Toggle>\n\n                                    <Dropdown.Menu>\n\n                                        {this.state.favorites.map(item =>\n                                            <Dropdown.Item\n                                                onClick={() => this.getFromFavorites(item)}\n                                            >\n                                                {item}\n                                            </Dropdown.Item>\n                                        )}\n\n                                    </Dropdown.Menu>\n                                </Dropdown>\n\n                            </Col>\n                        </Row>\n                    </Container>\n\n                </main>\n                <footer>\n\n                </footer>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}