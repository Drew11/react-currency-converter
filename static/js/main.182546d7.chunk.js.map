{"version":3,"sources":["api/helpers.js","components/Converter/Converter.js","components/Favorites/Favorites.js","components/CurrencyRates/CurrencyRates.js","api/api.js","App.js","index.js"],"names":["convertToOptions","obj","keysCountry","k","push","sort","a","b","localeCompare","map","country","index","key","defaultValue","Converter","props","stuffForConverter","className","name","id","value","selectedCurrency","onChange","event","setSelectedCurrency","target","currencyForConverter","rates","baseForConverter","setBaseForConverter","type","quantity","min","setQuantity","Math","floor","resultValue","Favorites","favorites","Dropdown","Toggle","variant","Object","entries","length","Menu","item","Item","CurrencyRates","stuffForRates","useEffect","copy","currencyForRates","setFavorites","base","baseForRates","setBaseForRates","ListGroup","array","currency","Button","onClick","hasOwnProperty","addFavorites","createListItems","getAllInfoCurrency","url","fetch","promise","json","convertValue","selected","convertingValue","App","useState","setCurrencyForConverter","setResultValue","updateCurrencyForConverter","useCallback","allInfoCurrency","updateSelectedCurrency","setCurrencyForRates","updateCurrencyForRates","infoCurrencyConverter","infoCurrencyRates","fetchData","Nav","to","Link","exact","from","path","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.182546d7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const convertToOptions = (obj) => {\r\n    const keysCountry = [];\r\n\r\n    for (let k in  obj) {\r\n        keysCountry.push(k)\r\n    }\r\n\r\n    keysCountry.sort((a, b) => a.localeCompare(b));\r\n\r\n    return keysCountry.map((country, index) =>\r\n        <option key={index}\r\n                defaultValue={country}\r\n        >\r\n            {country}\r\n        </option>\r\n    )\r\n};","import React from 'react';\r\nimport {convertToOptions} from '../../api/helpers';\r\nimport './converter.css';\r\n\r\nconst Converter = (props) => {\r\n\r\n    const {\r\n            stuffForConverter\r\n    } = props;\r\n\r\n    const changeBase = (event) => {\r\n        stuffForConverter.setBaseForConverter(event.target.value)\r\n     };\r\n\r\n    const changeSelectedCurrency = (event) => {\r\n        stuffForConverter.setSelectedCurrency(event.target.value);\r\n    };\r\n\r\n    const changeQuantity= (event) => {\r\n        stuffForConverter.setQuantity(event.target.value)\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={\"container\"}\r\n        >\r\n            <div className={\"converter\"}>\r\n\r\n                  <span>\r\n                      from\r\n                  </span>\r\n                <select\r\n                    name=\"currency-selected\"\r\n                    id=\"from\"\r\n                    value={stuffForConverter.selectedCurrency}\r\n                    onChange={changeSelectedCurrency}\r\n                >\r\n                    {\r\n                        convertToOptions(stuffForConverter.currencyForConverter.rates)\r\n                    }\r\n                </select>\r\n\r\n                <span>\r\n                      to\r\n                  </span>\r\n                <select\r\n                    name=\"currency-base\"\r\n                    id=\"to\"\r\n                    value={stuffForConverter.baseForConverter}\r\n                    onChange={changeBase}\r\n                >\r\n                    {\r\n                         convertToOptions(stuffForConverter.currencyForConverter.rates)\r\n                    }\r\n                </select>\r\n\r\n                <div className=\"amount\">\r\n                    <input\r\n                        type=\"number\"\r\n                        defaultValue={stuffForConverter.quantity}\r\n                        min={1}\r\n                        onChange={changeQuantity}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"result\">\r\n                    <h2>Result value:</h2>\r\n\r\n                    <span>\r\n                         {`${Math.floor((stuffForConverter.quantity* stuffForConverter.resultValue) * 100000) / 100000}: ${stuffForConverter.baseForConverter}`}\r\n                    </span>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default Converter;","import React from 'react';\r\nimport {Dropdown} from 'react-bootstrap';\r\nimport './favorites.css';\r\n\r\nconst Favorites = (props) => {\r\n\r\n    const {favorites } = props;\r\n\r\n    return (\r\n        <Dropdown>\r\n            <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                Favorites: {Object.entries(favorites).length}\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n\r\n                {Object.entries(favorites).map((item, index) =>\r\n                    <Dropdown.Item\r\n                        key={index}\r\n                    >\r\n                        {`${item[0]}: ${item[1]}` }\r\n                    </Dropdown.Item>\r\n                )}\r\n\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    )\r\n};\r\n\r\nexport default Favorites;","import React, {useEffect} from 'react';\r\nimport Favorites from '../Favorites/Favorites';\r\nimport {Button, ListGroup} from 'react-bootstrap';\r\nimport {convertToOptions} from '../../api/helpers';\r\nimport './current-rates.css';\r\n\r\nconst CurrencyRates = (props) => {\r\n\r\n    const {stuffForRates} = props;\r\n\r\n    const addFavorites = (key, value) => {\r\n        if (!stuffForRates.favorites.hasOwnProperty(key)) {\r\n            const copy = {...stuffForRates.favorites};\r\n            copy[key] = value;\r\n            stuffForRates.setFavorites(copy)\r\n        }\r\n    };\r\n\r\n    const changeBase = (event) => {\r\n        stuffForRates.setBaseForRates(event.target.value)\r\n    };\r\n\r\n    const createListItems = () => {\r\n        if (stuffForRates.currencyForRates.rates) {\r\n            const array = Object.entries(stuffForRates.currencyForRates.rates);\r\n            const copy = [...array];\r\n            copy.sort((a, b) => a[0].localeCompare(b[0]));\r\n\r\n            return copy.map((currency, index) =>\r\n                <ListGroup.Item\r\n                    key={index}\r\n                    className=\"list__group-item\"\r\n                >\r\n                    {`${currency[0]}: ${currency[1]}`}\r\n\r\n                    <Button\r\n                        onClick={() => {\r\n                            addFavorites(currency[0], currency[1])\r\n                        }}\r\n                    >+\r\n                    </Button>\r\n\r\n                </ListGroup.Item>\r\n            );\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n            const copy = {...stuffForRates.favorites};\r\n\r\n            for (let k in copy) {\r\n                copy[k] = stuffForRates.currencyForRates.rates[k]\r\n            }\r\n            stuffForRates.setFavorites(copy);\r\n        },\r\n        [stuffForRates.currencyForRates.base]\r\n    );\r\n\r\n    return (\r\n        <div className=\"container__currency-rates\">\r\n            <div className=\"currency-rates\">\r\n          <span\r\n              className={\"base\"}\r\n\r\n          >\r\n              <span>Base:</span>\r\n              <select name=\"base\"\r\n                      value={stuffForRates.baseForRates}\r\n                      onChange={changeBase}\r\n              >\r\n                  {convertToOptions(stuffForRates.currencyForRates.rates)}\r\n\r\n              </select>\r\n          </span>\r\n\r\n                <ListGroup\r\n                    variant=\"flush\"\r\n                    className=\"list__group\"\r\n                >\r\n                    {createListItems()}\r\n                </ListGroup>\r\n\r\n            </div>\r\n\r\n            <Favorites\r\n                favorites={stuffForRates.favorites}\r\n            />\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CurrencyRates;","const getGeoData = async ()=>{\r\n   // const promise = await fetch('http://api.ipstack.com/check?access_key=ce43b9472f5f4a2379636b82cd17bc83');\r\n    const promise = await fetch('https://ipinfo.io?token=5455558e65b8b4');\r\n    const geoData = await promise.json();\r\n    return geoData;\r\n};\r\n\r\nexport const getAllInfoCurrency = async (base)=>{\r\n    const url = `https://api.exchangeratesapi.io/latest?base=${base}`;\r\n   // const promise = await fetch(`http://data.fixer.io/api/latest?access_key=032f3ff907cc406f6edc0a4a469ebfe3&base=USD&symbols=UAH`);\r\n    const promise = await fetch(url);\r\n    const currency = await promise.json();\r\n    return currency;\r\n};\r\n\r\nexport const getCountryCurrency = async (country)=>{\r\n    const promise = await fetch(`https://restcountries.eu/rest/v2/alpha/${country}`);\r\n    const countryCurrency = await promise.json();\r\n    return countryCurrency;\r\n};\r\n\r\nexport const getBaseUserGeoCurrency = async ()=> {\r\n    const location = await getGeoData();\r\n    const countryCurrency = await getCountryCurrency(location.country);\r\n\r\n    const baseCurrency = countryCurrency.currencies[0].code;\r\n    return baseCurrency\r\n};\r\n\r\nexport const convertValue = async (selected, base) => {\r\n    const convertingValue = await getAllInfoCurrency(selected);\r\n    const value = convertingValue.rates[base];\r\n\r\n    return value\r\n};","import React, {useCallback, useEffect, useState} from 'react';\nimport Converter from './components/Converter/Converter';\nimport CurrencyRates from './components/CurrencyRates/CurrencyRates';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Nav} from 'react-bootstrap';\nimport {Redirect, Route} from \"react-router\";\nimport {LinkContainer} from 'react-router-bootstrap'\nimport './App.css';\nimport {convertValue, getAllInfoCurrency} from \"./api/api\";\n\nconst App = () => {\n\n    const [currencyForConverter, setCurrencyForConverter] = useState({});\n    const [baseForConverter, setBaseForConverter] = useState('USD');\n    const [selectedCurrency, setSelectedCurrency] = useState('RUB');\n    const [resultValue, setResultValue] = useState(0);\n    const [quantity, setQuantity] = useState(1);\n    const stuffForConverter = {\n        currencyForConverter: currencyForConverter,\n        baseForConverter: baseForConverter,\n        selectedCurrency: selectedCurrency,\n        quantity: quantity,\n        resultValue: resultValue,\n        setBaseForConverter: setBaseForConverter,\n        setSelectedCurrency: setSelectedCurrency,\n        setQuantity: setQuantity\n    };\n\n    const updateCurrencyForConverter = useCallback(async () => {\n        const allInfoCurrency = await getAllInfoCurrency(baseForConverter);\n        setCurrencyForConverter(allInfoCurrency);\n        const convertingValue = await convertValue(selectedCurrency, baseForConverter);\n        setResultValue(convertingValue);\n    }, [baseForConverter]);\n\n    const updateSelectedCurrency = useCallback(async () => {\n        const convertingValue = await convertValue(selectedCurrency, baseForConverter);\n        setResultValue(convertingValue);\n    }, [selectedCurrency]);\n\n\n    const [currencyForRates, setCurrencyForRates] = useState({});\n    const [baseForRates, setBaseForRates] = useState('USD');\n    const [favorites, setFavorites] = useState({});\n\n    const stuffForRates = {\n        currencyForRates: currencyForRates,\n        favorites: favorites,\n        setFavorites: setFavorites,\n        baseForRates: baseForRates,\n        setBaseForRates: setBaseForRates\n    };\n\n    const updateCurrencyForRates = useCallback(async () => {\n        const allInfoCurrency = await getAllInfoCurrency(baseForRates);\n        setCurrencyForRates(allInfoCurrency);\n\n    }, [baseForRates]);\n\n    useEffect(() => {\n        async function fetchData() {\n            //const userGeoCurrency = await getBaseUserGeoCurrency();\n            const infoCurrencyConverter = await getAllInfoCurrency(baseForConverter);\n            const infoCurrencyRates = await getAllInfoCurrency(baseForRates);\n            const convertingValue = await convertValue(selectedCurrency, baseForConverter);\n            setCurrencyForConverter(infoCurrencyConverter);\n            setCurrencyForRates(infoCurrencyRates);\n            setResultValue(convertingValue);\n        }\n\n        fetchData();\n    }, []);\n\n    useEffect(() => {\n        updateSelectedCurrency();\n    }, [selectedCurrency]);\n\n    useEffect(() => {\n        updateCurrencyForConverter();\n    }, [baseForConverter]);\n\n    useEffect(() => {\n        updateCurrencyForRates();\n    }, [baseForRates]);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Nav variant=\"tabs\">\n                    <Nav.Item>\n                        <LinkContainer to=\"/converter\">\n                            <Nav.Link>\n                                Converter\n                            </Nav.Link>\n                        </LinkContainer>\n\n                    </Nav.Item>\n                    <Nav.Item>\n                        <LinkContainer to=\"/currency_rates\">\n                            <Nav.Link>\n                                Currency Rates\n                            </Nav.Link>\n                        </LinkContainer>\n                    </Nav.Item>\n                </Nav>\n            </header>\n            <main>\n                <Redirect exact from=\"/\" to={\"/converter\"}/>\n                <Route\n                    exact path=\"/converter\"\n                >\n                    <Converter stuffForConverter={stuffForConverter}/>\n                </Route>\n                <Route exact path=\"/currency_rates\">\n                    <CurrencyRates stuffForRates={stuffForRates}/>\n                </Route>\n            </main>\n            <footer>\n            </footer>\n        </div>\n    );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <Router basename=\"/react-currency-converter/\">\n        <App />\n    </Router>,\n    document.getElementById('root'));\n\n"],"sourceRoot":""}